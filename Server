import socket
import threading

clients = []

def broadcast(message, sender_socket):
    for client in clients:
        if client != sender_socket:
            try:
                client.send(message)
            except:
                clients.remove(client)

def handle_client(client_socket, client_address):
    print(f"Listen on {client_address[0]}:{client_address[1]}")
    clients.append(client_socket)

    while True:
        try:
            data = client_socket.recv(1024)
            if not data:
                break
            print(f"{client_address[0]}:{client_address[1]} : {data.decode()}")
            broadcast(data, client_socket)
        except:
            break

    print(f"Shutdown of {client_address[0]}:{client_address[1]}")
    clients.remove(client_socket)
    client_socket.close()

def main():
    
    host = '0.0.0.0'  
    port = 81

    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen(5)

    print(f"Server wait on {host}:{port}...")

    while True:
        client_socket, client_address = server_socket.accept()

        client_handler = threading.Thread(target=handle_client, args=(client_socket, client_address))
        client_handler.start()
    
        

if __name__ == "__main__":
    main()
    
